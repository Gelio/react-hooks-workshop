{"version":3,"sources":["controls/checkbox.js","utils/format-date.js","controls/controls.js","chart/chart.js","chart/transform-rates.js","chart/use-currency-data.js","chart/currency-fetch-params-factory.js","utils/cancelable-fetch.js","chart/currency-data-provider.js","App.js","serviceWorker.js","index.js"],"names":["Checkbox","_ref","id","checked","children","onChange","disabled","onChangeHandler","useCallback","event","target","react_default","a","createElement","type","htmlFor","formatDate","date","getFullYear","getMonth","getDate","map","x","targetLength","paddedString","padding","arguments","length","undefined","Array","Math","max","fill","join","padLeft","toString","currencies","Controls","onUpdate","_useState","useState","_useState2","Object","slicedToArray","baseCurrency","setBaseCurrency","_useState3","_useState4","foreignCurrencies","setForeignCurrencies","_useState5","Date","_useState6","fromDate","setFromDate","_useState7","_useState8","toDate","setToDate","useEffect","onBaseCurrencyChange","value","index","indexOf","concat","toConsumableArray","slice","onFromDateChange","onToDateChange","currency","key","includes","foreignCurrencyIndex","lineStrokes","Chart","rates","transformedRates","useMemo","ratesArray","keys","objectSpread","sort","b","transformRates","LineChart","width","height","data","XAxis","dataKey","YAxis","CartesianGrid","stroke","strokeDasharray","Tooltip","Legend","foreignCurrency","Line","dot","useCurrencyData","loading","setLoading","setRates","searchParams","symbols","currencyFetchParamsFactory","_cancelableFetch","url","abortController","AbortController","fetch","signal","abort","cancelableFetch","_cancelableFetch2","request","cancelRequest","then","response","json","body","CurrencyDataProvider","_useCurrencyData","propTypes","PropTypes","func","isRequired","App","state","setState","onControlsUpdate","newState","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bc06e379.chunk.js","sourcesContent":["import React, { useCallback } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function Checkbox({\r\n  id,\r\n  checked,\r\n  children,\r\n  onChange,\r\n  disabled\r\n}) {\r\n  const onChangeHandler = useCallback(event => onChange(event.target.checked), [\r\n    onChange\r\n  ]);\r\n\r\n  return (\r\n    <div>\r\n      <input\r\n        type=\"checkbox\"\r\n        id={id}\r\n        checked={checked}\r\n        onChange={onChangeHandler}\r\n        disabled={disabled}\r\n      />\r\n      <label htmlFor={id}>{children}</label>\r\n    </div>\r\n  );\r\n}\r\n\r\nCheckbox.propTypes = {\r\n  id: PropTypes.string.isRequired,\r\n  checked: PropTypes.bool.isRequired,\r\n  children: PropTypes.node.isRequired,\r\n  onChange: PropTypes.func,\r\n  disabled: PropTypes.bool\r\n};\r\n","/**\r\n * @param {Date} date\r\n */\r\nexport default function formatDate(date) {\r\n  return [date.getFullYear(), date.getMonth() + 1, date.getDate()]\r\n    .map(x => padLeft(2, x.toString()))\r\n    .join('-');\r\n}\r\n\r\nfunction padLeft(targetLength, paddedString, padding = '0') {\r\n  return (\r\n    new Array(Math.max(targetLength - paddedString.length, 0))\r\n      .fill(padding)\r\n      .join('') + paddedString\r\n  );\r\n}\r\n","import React, { useState, useEffect, useCallback } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Checkbox from './checkbox';\r\nimport formatDate from '../utils/format-date';\r\n\r\n// NOTE: use the `currencies` array\r\nconst currencies = ['USD', 'EUR', 'PLN', 'GBP', 'CHF'];\r\n\r\nexport default function Controls({ onUpdate }) {\r\n  const [baseCurrency, setBaseCurrency] = useState(currencies[0]);\r\n  const [foreignCurrencies, setForeignCurrencies] = useState([\r\n    currencies[1],\r\n    currencies[2]\r\n  ]);\r\n  const [fromDate, setFromDate] = useState(new Date(2018, 1, 10));\r\n  const [toDate, setToDate] = useState(new Date());\r\n\r\n  useEffect(() => {\r\n    onUpdate({\r\n      baseCurrency,\r\n      foreignCurrencies,\r\n      fromDate,\r\n      toDate\r\n    });\r\n  }, [baseCurrency, foreignCurrencies, fromDate, toDate]);\r\n\r\n  const onBaseCurrencyChange = useCallback(\r\n    event => {\r\n      setBaseCurrency(event.target.value);\r\n\r\n      const index = foreignCurrencies.indexOf(event.target.value);\r\n      if (index !== -1) {\r\n        setForeignCurrencies([\r\n          ...foreignCurrencies.slice(0, index),\r\n          ...foreignCurrencies.slice(index + 1)\r\n        ]);\r\n      }\r\n    },\r\n    [setBaseCurrency, foreignCurrencies, setForeignCurrencies]\r\n  );\r\n\r\n  const onFromDateChange = useCallback(\r\n    event => {\r\n      setFromDate(new Date(event.target.value));\r\n    },\r\n    [setFromDate]\r\n  );\r\n\r\n  const onToDateChange = useCallback(\r\n    event => {\r\n      setToDate(new Date(event.target.value));\r\n    },\r\n    [setToDate]\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        Base currency:\r\n        <select value={baseCurrency} onChange={onBaseCurrencyChange}>\r\n          {currencies.map(currency => (\r\n            <option value={currency} key={currency}>\r\n              {currency}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n\r\n      <div>\r\n        Foreign currencies:\r\n        {currencies.map((currency, index) => (\r\n          <Checkbox\r\n            id={`foreign-${currency}`}\r\n            checked={foreignCurrencies.includes(currency)}\r\n            disabled={currency === baseCurrency}\r\n            key={currency}\r\n            onChange={() => {\r\n              const foreignCurrencyIndex = foreignCurrencies.indexOf(currency);\r\n              if (foreignCurrencyIndex === -1) {\r\n                setForeignCurrencies([...foreignCurrencies, currency]);\r\n              } else {\r\n                setForeignCurrencies([\r\n                  ...foreignCurrencies.slice(0, foreignCurrencyIndex),\r\n                  ...foreignCurrencies.slice(foreignCurrencyIndex + 1)\r\n                ]);\r\n              }\r\n            }}\r\n          >\r\n            {currency}\r\n          </Checkbox>\r\n        ))}\r\n      </div>\r\n\r\n      <div>\r\n        From date:{' '}\r\n        <input\r\n          type=\"date\"\r\n          value={formatDate(fromDate)}\r\n          onChange={onFromDateChange}\r\n        />\r\n      </div>\r\n      <div>\r\n        To date:{' '}\r\n        <input\r\n          type=\"date\"\r\n          value={formatDate(toDate)}\r\n          onChange={onToDateChange}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nControls.propTypes = {\r\n  onUpdate: PropTypes.func.isRequired\r\n};\r\n","import React, { useMemo } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n  LineChart,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Line,\r\n  Tooltip,\r\n  Legend\r\n} from 'recharts';\r\n\r\nimport transformRates from './transform-rates';\r\n\r\nconst lineStrokes = [\r\n  '#8883d8',\r\n  '#82ca9d',\r\n  '#6d888b',\r\n  '#25f486',\r\n  '#d1d91f',\r\n  '#8c0abb',\r\n  '#0cbbde',\r\n  '#ce3507',\r\n  '#5a2b86',\r\n  '#e68c8d'\r\n];\r\n\r\nexport default function Chart({ rates, foreignCurrencies }) {\r\n  const transformedRates = useMemo(() => transformRates(rates), [rates]);\r\n\r\n  return (\r\n    <LineChart width={800} height={500} data={transformedRates}>\r\n      <XAxis dataKey=\"date\" />\r\n      <YAxis />\r\n      <CartesianGrid stroke=\"#eee\" strokeDasharray=\"5 5\" />\r\n      <Tooltip />\r\n      <Legend />\r\n\r\n      {foreignCurrencies.map((foreignCurrency, index) => (\r\n        <Line\r\n          type=\"linear\"\r\n          dot={false}\r\n          dataKey={foreignCurrency}\r\n          key={foreignCurrency}\r\n          stroke={lineStrokes[index % lineStrokes.length]}\r\n        />\r\n      ))}\r\n    </LineChart>\r\n  );\r\n}\r\n\r\nChart.propTypes = {\r\n  rates: PropTypes.object.isRequired,\r\n  foreignCurrencies: PropTypes.arrayOf(PropTypes.string).isRequired\r\n};\r\n","/**\r\n * Transforms the `rates` object from https://exchangeratesapi.io/ into a format that could be\r\n * passed to recharts:\r\n *\r\n * ```json\r\n * [\r\n *   {\r\n *     \"date\": \"2019-02-10\",\r\n *     \"PLN\": 3.7891,\r\n *     \"EUR\": 0.874\r\n *   },\r\n *   {\r\n *     \"date\": \"2019-02-09\",\r\n *     \"PLN\": 3.71,\r\n *     \"EUR\": 0.84\r\n *   },\r\n *   // ...\r\n * ]\r\n * ```\r\n *\r\n * @param {object[]} rates\r\n */\r\nexport default function transformRates(rates) {\r\n  const ratesArray = Object.keys(rates).map(date => ({\r\n    date,\r\n    ...rates[date]\r\n  }));\r\n\r\n  ratesArray.sort((a, b) => {\r\n    return new Date(a.date) - new Date(b.date);\r\n  })\r\n\r\n  return ratesArray;\r\n}\r\n\r\n","import { useEffect, useState } from 'react';\r\n\r\nimport currencyFetchParamsFactory from './currency-fetch-params-factory';\r\nimport cancelableFetch from '../utils/cancelable-fetch';\r\n\r\nexport default function useCurrencyData({\r\n  fromDate,\r\n  toDate,\r\n  baseCurrency,\r\n  foreignCurrencies\r\n}) {\r\n  const [loading, setLoading] = useState(true);\r\n  const [rates, setRates] = useState({});\r\n\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    const searchParams = currencyFetchParamsFactory({\r\n      fromDate,\r\n      toDate,\r\n      baseCurrency,\r\n      foreignCurrencies\r\n    });\r\n\r\n    const [request, cancelRequest] = cancelableFetch(\r\n      `https://api.exchangeratesapi.io/history?${searchParams}`\r\n    );\r\n\r\n    request\r\n      .then(response => response.json())\r\n      .then(body => {\r\n        setLoading(false);\r\n        setRates(body.rates);\r\n      });\r\n\r\n    return () => {\r\n      cancelRequest();\r\n    };\r\n  }, [fromDate, toDate, baseCurrency, foreignCurrencies]);\r\n\r\n  return { loading, rates };\r\n}\r\n","import formatDate from '../utils/format-date';\r\n\r\n/**\r\n * Creates the querystring for https://exchangeratesapi.io/ based on provided parameters\r\n *\r\n * @param {{ fromDate: Date, toDate: Date, baseCurrency: string, foreignCurrencies: string[] }} param0\r\n */\r\nexport default function currencyFetchParamsFactory({\r\n  fromDate,\r\n  toDate,\r\n  baseCurrency,\r\n  foreignCurrencies\r\n}) {\r\n  const symbols = foreignCurrencies.join(',');\r\n\r\n  return [\r\n    `start_at=${formatDate(fromDate)}`,\r\n    `end_at=${formatDate(toDate)}`,\r\n    `base=${baseCurrency}`,\r\n    `symbols=${symbols}`\r\n  ].join('&');\r\n}\r\n","/**\r\n * Makes a `fetch` GET request to a given URL that can be cancelled.\r\n *\r\n * @param {string} url\r\n */\r\nexport default function cancelableFetch(url) {\r\n  const abortController = new AbortController();\r\n\r\n  return [\r\n    fetch(url, { signal: abortController.signal }),\r\n    () => abortController.abort()\r\n  ];\r\n}\r\n","import PropTypes from 'prop-types';\r\nimport useCurrencyData from './use-currency-data';\r\n\r\nexport default function CurrencyDataProvider({\r\n  fromDate,\r\n  toDate,\r\n  baseCurrency,\r\n  foreignCurrencies,\r\n  children\r\n}) {\r\n  const { loading, rates } = useCurrencyData({\r\n    fromDate,\r\n    toDate,\r\n    baseCurrency,\r\n    foreignCurrencies\r\n  });\r\n\r\n  return children({ loading, rates });\r\n}\r\n\r\nCurrencyDataProvider.propTypes = {\r\n  children: PropTypes.func.isRequired\r\n};\r\n","import React, { useState, useCallback } from 'react';\r\n\r\nimport Controls from './controls/controls';\r\nimport Chart from './chart/chart';\r\nimport CurrencyDataProvider from './chart/currency-data-provider';\r\n\r\nfunction App() {\r\n  const [state, setState] = useState();\r\n\r\n  const onControlsUpdate = useCallback(\r\n    newState => {\r\n      setState({\r\n        ...state,\r\n        ...newState\r\n      });\r\n    },\r\n    [state, setState]\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <h1>Foreign currency rates chart</h1>\r\n\r\n      <Controls onUpdate={onControlsUpdate} />\r\n\r\n      {state && (\r\n        <CurrencyDataProvider {...state}>\r\n          {({ loading, rates }) =>\r\n            loading ? (\r\n              <p>Loading...</p>\r\n            ) : (\r\n              <Chart\r\n                rates={rates}\r\n                foreignCurrencies={state.foreignCurrencies}\r\n              />\r\n            )\r\n          }\r\n        </CurrencyDataProvider>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}